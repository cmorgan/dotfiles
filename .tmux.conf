set -g default-terminal xterm-256color

#--Key-Bindings-----------------------------------------------------------------
bind | split-window -h
bind _ split-window -v
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind space next-window
 
# vim style navigations
bind-key h select-pane -L
bind-key ^H select-pane -L
bind-key k select-pane -U
bind-key ^K select-pane -U
bind-key j select-pane -D
bind-key ^J select-pane -D
bind-key l select-pane -R
bind-key ^L select-pane -R

bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5

# only resize a window if a client is activley looking at it
setw -g aggressive-resize on

# Reload key
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# flip to last window
bind-key a last-window

# activity stuff
setw -g monitor-activity off
set -g visual-activity off
#set-option -g bell-action any
set-option -g visual-bell off
#set-option -g renumber-windows on
set-option -g bell-action any

# window movement, 
# general syntax: swap-window -s $source_index -t $target_index
# to move current window to the top:
bind-key T swap-window -t 0
bind-key m command-prompt -p "move window to:" "move-window -t '%%'"

# pane movement
#bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
#bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"
#bind-key Enter rotate-window -D
#bind-key C-Enter rotate-window -U

# swapping pane
#tmux swap-pane -[UDLR] (prefix + { or })
#bind-key K swap-pane -dL
#bind-key m command-prompt -p "swap pane:"  "swap-pane -s '%%'"
bind-key N swap-pane -D
bind-key P swap-pane -U

setw -g automatic-rename

# escape delay is too long, set to 0
set -sg escape-time 1  

# Number windows and panes starting at 1 so that we can jump to
# them easier.
set -g base-index 1
set -g pane-base-index 1
#--Status-Bar-------------------------------------------------------------------
#
# Default colors
set -g status-bg black
set -g status-fg white
 
# THEME
set -g status-bg black
set -g status-fg white
set -g status-interval 60
set -g status-left-length 30
#set -g status-left '#[fg=green](#S) #(whoami)@#H#[default]'
set -g status-left '#[fg=green](#S)'
# # load avg and date time
# set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=blue]%m/%d %H:%M#[default]'
# load average, battery, and date + time
set -g status-right "#[fg=magenta]#(/usr/local/bin/battery Discharging) -#[fg=magenta] #(cat /proc/loadavg|awk '{print $1 \" \"  $2 \" \"  $3}') - #[fg=cyan]%d/%m - #[fg=green]%H:%M"

# Highlight active window
set-window-option -g window-status-current-bg green
#--Usability--------------------------------------------------------------------
#
set-option -g status-keys vi
set-window-option -g mode-keys vi

# keep tmux msgs around longer
set -g display-time 3000
# set -g set-titles off
bind v run-shell "reattach-to-user-namespace -l bash -c 'tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer'"

set -g history-limit 30000

# copy in tmux
unbind [
unbind p
bind C-y copy-mode
bind p paste-buffer
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
bind -t vi-copy Escape cancel

bind-key '"' split-window -c "#{pane_current_path}"
bind-key c neww -c "#{pane_current_path}"
bind-key '%' split-window -h -c "#{pane_current_path}"

# from http://grota.github.com/blog/2012/05/08/tmux-clipboard-integration/
# paste system clipboard into tmux buffer
bind C-v run 'tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(+\) $(xclip -o -sel clipboard | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \"'
                                                                                         # choose to copy from t-mux buffer into system clipoard
#bind C-c choose-buffer 'run \"tmux save-buffer -b %% - | xclip -i -sel clipboard\" \; run \" tmux display \\\"Clipboard \(+\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" '                                  
# like the above but picks the first tmux buffer
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"

# repeat for selection clipboard
# C-d: save into selection clipboard (*). With preselection.
bind C-d choose-buffer "run \"tmux save-buffer -b %% - | xclip -i\" \; run \" tmux display \\\"Clipboard \(*\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-f: copy from * clipboard.
bind C-f run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(*\) $(xclip -o | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""
set-option -g status-right '#(cat ~/.thyme-tmux)'
set-option -g status-interval 2
